package za.ac.cput.controllers;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import za.ac.cput.domain.entity.DamageReport; // Corrected import
import za.ac.cput.factory.impl.DamageReportFactory;
import za.ac.cput.service.impl.DamageReportServiceImpl; // Assuming this is the correct service implementation

import java.util.List;

/**
 * DamageReportController.java
 * Controller Class for the Damage Report.
 * Handles CRUD operations for damage reports.
 * Author: Cwenga Dlova (214310671)
 * Date: 08/09/2023
 * Updated by: Your Name/ID (if applicable)
 * Updated date: Current Date
 */
@RestController
@RequestMapping("/api/v1/damage-reports") // Standardized API path
@Api(value = "Damage Report Management", tags = "Damage Report Management")
public class DamageReportController {

    private final DamageReportServiceImpl damageReportService;

    /**
     * Constructs a DamageReportController with the necessary DamageReport service.
     *
     * @param damageReportService The service implementation for Damage Report operations.
     */
    @Autowired
    public DamageReportController(DamageReportServiceImpl damageReportService) {
        this.damageReportService = damageReportService;
    }

    /**
     * Creates a new damage report.
     * The ID from the request body might be ignored if the database auto-generates IDs.
     *
     * @param damageReport The damage report data to create. Note: 'id' in the body might be ignored.
     * @return A ResponseEntity containing the created DamageReport and HTTP status OK.
     */
    @PostMapping("/create")
    @ApiOperation(value = "Create a new damage report", notes = "Creates a new damage report in the system. The ID in the request body might be ignored if auto-generated by the database.")
    public ResponseEntity<DamageReport> create(@ApiParam(value = "Damage report data. 'id' field might be ignored.", required = true) @RequestBody DamageReport damageReport) {
        DamageReport newDamageReport = DamageReportFactory.createReport(
                damageReport.getId(), // If ID is auto-generated, this might be ignored or could be 0/null.
                damageReport.getRental(),
                damageReport.getDescription(),
                damageReport.getDateAndTime(),
                damageReport.getLocation(),
                damageReport.getRepairCost()
        );
        DamageReport damageReportSaved = this.damageReportService.create(newDamageReport);
        return ResponseEntity.ok(damageReportSaved);
    }

    /**
     * Retrieves a specific damage report by its ID.
     *
     * @param id The ID of the damage report to retrieve.
     * @return A ResponseEntity containing the DamageReport if found, or 404 Not Found if the report does not exist.
     */
    @GetMapping("/read/{id}")
    @ApiOperation(value = "Get a damage report by ID", notes = "Retrieves a specific damage report by its ID.")
    public ResponseEntity<DamageReport> read(@ApiParam(value = "ID of the damage report to retrieve", required = true) @PathVariable("id") int id) {
        DamageReport readDamageReport = this.damageReportService.read(id); // Service method returns DamageReport or null
        if (readDamageReport == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Report not found with ID: " + id);
        }
        return ResponseEntity.ok(readDamageReport);
    }

    /**
     * Updates an existing damage report.
     * The ID of the damage report to update is taken from the DamageReport object in the request body.
     *
     * @param damageReport The damage report data to update. It must contain the ID of the existing report.
     * @return A ResponseEntity containing the updated DamageReport and HTTP status OK.
     * @throws ResponseStatusException if the report to update is not found.
     */
    @PutMapping("/update")
    @ApiOperation(value = "Update an existing damage report", notes = "Updates an existing damage report in the system. The report ID must be specified in the request body.")
    public ResponseEntity<DamageReport> update(@ApiParam(value = "Damage report data to update. Must include the report ID.", required = true) @RequestBody DamageReport damageReport) {
        // Ensure the report exists before attempting to update (service also checks, but good practice here too)
        DamageReport existingReport = damageReportService.read(damageReport.getId());
        if (existingReport == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Report not found with ID: " + damageReport.getId() + " for update.");
        }
        DamageReport updateReport = damageReportService.update(damageReport);
        return new ResponseEntity<>(updateReport, HttpStatus.OK);
    }

    /**
     * Deletes a damage report by its ID.
     *
     * @param id The ID of the damage report to delete.
     * @return A ResponseEntity with HTTP status OK if deletion was successful.
     * @throws ResponseStatusException if the report to delete is not found.
     */
    @DeleteMapping("/delete/{id}")
    @ApiOperation(value = "Delete a damage report by ID", notes = "Deletes a specific damage report by its ID.")
    public ResponseEntity<?> delete(@ApiParam(value = "ID of the damage report to delete", required = true) @PathVariable("id") int id) {
        // Ensure the report exists before attempting to delete (service also checks, but good practice here too)
        DamageReport existingReport = damageReportService.read(id);
        if (existingReport == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Report not found with ID: " + id + " for deletion.");
        }
        this.damageReportService.deleteById(id); // service's deleteById returns boolean, but controller returns ResponseEntity
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * Retrieves all damage reports.
     *
     * @return A ResponseEntity containing a list of all DamageReports and HTTP status OK.
     *         If no reports are found, it returns an empty list with HTTP status OK.
     */
    @GetMapping("/getAll")
    @ApiOperation(value = "Get all damage reports", notes = "Retrieves a list of all damage reports in the system.")
    public ResponseEntity<List<DamageReport>> getAll() {
        List<DamageReport> damageReportList = this.damageReportService.getAll();
        return ResponseEntity.ok(damageReportList); // Returns empty list if no reports, which is fine (200 OK)
    }
}