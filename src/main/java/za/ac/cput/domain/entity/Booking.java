package za.ac.cput.domain.entity;

import jakarta.persistence.*;
import lombok.Getter;
import za.ac.cput.domain.entity.security.User;
import za.ac.cput.domain.enums.BookingStatus;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

@Getter
@Entity
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    @Column(nullable = false, unique = true, updatable = false)
    private UUID uuid;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "car_id")
    private Car car;

    @ManyToOne
    @JoinColumn(name = "driver_id")
    private Driver driver;

    private LocalDateTime startDate;
    private LocalDateTime endDate;
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 60) // Adjust length for longest BookingStatus name
    private BookingStatus status; // PENDING, CONFIRMED, CANCELED
    private  boolean deleted;
   /* @Column(updatable = false)*/
    private LocalDateTime createdAt;
   /* @Column(updatable = false)*/
    private LocalDateTime updatedAt;
    public Booking() {
    }


    // Constructors

    public Booking(Builder builder) {
        this.id = builder.id;
        this.uuid = builder.uuid;
        this.user = builder.user;
        this.car = builder.car;
        this.driver = builder.driver;
        this.startDate = builder.startDate;
        this.endDate = builder.endDate;
        this.status = builder.status;
        this.deleted = builder.deleted;
        this.createdAt = builder.createdAt;
        this.updatedAt = builder.updatedAt;

    }

    @PrePersist
    protected void onCreate() {
        if (this.uuid == null) {
            this.uuid = UUID.randomUUID();
/*
            System.out.println("UUID generated by booking entity: " + this.uuid);
*/
        }
        // For a new booking created by a user, it should immediately be CONFIRMED
        // assuming availability checks passed during the creation request.
        if (this.status == null) {
            this.status = BookingStatus.CONFIRMED;
        }
        if (this.createdAt == null) {
            this.createdAt = LocalDateTime.now();
        }
        if (this.updatedAt == null) {
            this.updatedAt = LocalDateTime.now();
        }
            this.deleted = false; // Default to not deleted
    }
    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Booking booking = (Booking) o;
        return id == booking.id && deleted == booking.deleted && Objects.equals(uuid, booking.uuid) && Objects.equals(user, booking.user) && Objects.equals(car, booking.car) && Objects.equals(startDate, booking.startDate) && Objects.equals(endDate, booking.endDate) && Objects.equals(status, booking.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, uuid, user, car, startDate, endDate, status, deleted);
    }

    @Override
    public String toString() {
        return "Booking{" +
                "id=" + id +
                ", uuid=" + uuid +
                ", user=" + user +
                ", car=" + car +
                ", bookingStartDate=" + startDate +
                ", bookingEndDate=" + endDate +
                ", status='" + status + '\'' +
                ", deleted=" + deleted +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                '}';
    }

// Builder pattern

    public static class Builder {
        private int id;
        private UUID uuid;
        private User user;
        private Car car;
        private Driver driver;
        private LocalDateTime startDate;
        private LocalDateTime endDate;
        private BookingStatus status;
        private boolean deleted;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;

        public Builder setId(int id) {
            this.id = id;
            return this;
        }

        public Builder setUuid(UUID uuid) {
            this.uuid = uuid;
            return this;
        }

        public Builder setUser(User user) {
            this.user = user;
            return this;
        }

        public Builder setCar(Car car) {
            this.car = car;
            return this;
        }

        public Builder setDriver(Driver driver) {
            this.driver = driver;
            return this;
        }

        public Builder setStartDate(LocalDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder setEndDate(LocalDateTime endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder setStatus(BookingStatus status) {
            this.status = status;
            return this;
        }

        public Builder setDeleted(boolean deleted) {
            this.deleted = deleted;
            return this;
        }
        public Builder setCreatedAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        public Builder setUpdatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder copy(Booking booking) {
            this.id = booking.id;
            this.user = booking.user;
            this.car = booking.car;
            this.driver = booking.driver;
            this.startDate = booking.startDate;
            this.endDate = booking.endDate;
            this.status = booking.status;
            this.deleted = booking.deleted;
            this.createdAt = booking.createdAt;
            this.updatedAt = booking.updatedAt;
            return this;
        }

        public Booking build() {
            return new Booking(this);
        }


    }
}
