package za.ac.cput.domain.mapper;

import za.ac.cput.domain.dto.request.DriverCreateDTO;
import za.ac.cput.domain.dto.request.DriverUpdateDTO;
import za.ac.cput.domain.dto.response.DriverResponseDTO;
import za.ac.cput.domain.entity.Driver;

import java.util.List;
import java.util.UUID; // Not directly used in DTO->Entity mapping as UUID is generated
import java.util.stream.Collectors;

public class DriverMapper {

    public static DriverResponseDTO toDto(Driver driver) {
        if (driver == null) return null;
        // Using Lombok @Builder on DriverResponseDTO
        return DriverResponseDTO.builder()
                .uuid(driver.getUuid())
                .firstName(driver.getFirstName())
                .lastName(driver.getLastName())
                .licenseCode(driver.getLicenseCode())
                .build();
    }

    public static List<DriverResponseDTO> toDtoList(List<Driver> drivers) {
        if (drivers == null) return null;
        return drivers.stream().map(DriverMapper::toDto).collect(Collectors.toList());
    }

    /**
     * Maps DriverCreateDTO to a new Driver entity using the Driver.Builder.
     * UUID will be generated by @PrePersist. ID by database.
     */
    public static Driver toEntity(DriverCreateDTO createDto) {
        if (createDto == null) return null;
        // Using the entity's static Builder class
        return new Driver.Builder()
                .setFirstName(createDto.getFirstName())
                .setLastName(createDto.getLastName())
                .setLicenseCode(createDto.getLicenseCode())
                // uuid is set by @PrePersist, id by DB, deleted defaults to false by entity builder/PrePersist
                // .deleted(false) // This can be a default in the Builder itself or @PrePersist
                .build();
    }

    /**
     * Creates a NEW Driver entity instance by applying updates from a DriverUpdateDTO
     * to the data from an existing Driver entity, using the Driver.Builder.
     */
    public static Driver applyUpdateDtoToEntity(DriverUpdateDTO updateDto, Driver existingDriver) {
        if (updateDto == null || existingDriver == null) {
            throw new IllegalArgumentException("Update DTO and existing Driver entity must not be null.");
        }

        Driver.Builder builder = new Driver.Builder().copy(existingDriver); // Start with existing values

        if (updateDto.getFirstName() != null) {
            builder.setFirstName(updateDto.getFirstName());
        }
        if (updateDto.getLastName() != null) {
            builder.setLastName(updateDto.getLastName());
        }
        if (updateDto.getLicenseCode() != null) {
            builder.setLicenseCode(updateDto.getLicenseCode());
        }
        // id, uuid, deleted status are preserved from existingDriver by .copy()

        return builder.build(); // Returns a new Driver instance with merged data
    }
}