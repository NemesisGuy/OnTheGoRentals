package za.ac.cput.service.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import za.ac.cput.domain.entity.AboutUs;
import za.ac.cput.repository.AboutUsRepository;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.*;

/**
 * Unit tests for {@link AboutUsServiceImpl}.
 * Tests CRUD operations and other business logic for AboutUs entities.
 *
 * Author: [Your Name/Generated By AI]
 * Date: 2025-06-01
 */
@ExtendWith(MockitoExtension.class)
class AboutUsServiceImplTest {

    @Mock
    private AboutUsRepository aboutUsRepository;

    @InjectMocks
    private AboutUsServiceImpl aboutUsService;

    private AboutUs sampleAboutUs;
    private AboutUs aboutUsToCreate;
    private UUID commonUuid;
    private LocalDateTime fixedTime;

    @BeforeEach
    void setUp() {
        commonUuid = UUID.randomUUID();
        fixedTime = LocalDateTime.now();

        sampleAboutUs = new AboutUs.Builder()
                .setId(1)
                .setUuid(commonUuid)
                .setAddress("123 Main St, Anytown")
                .setOfficeHours("Mon-Fri: 9am-5pm")
                .setEmail("contact@example.com")
                .setTelephone("555-1234")
                .setWhatsApp("555-5678")
                .setDeleted(false)
                .setCreatedAt(fixedTime.minusDays(1))
                .setUpdatedAt(fixedTime.minusHours(2))
                .build();

        // For creation, ID is usually not set, UUID might be null or set
        aboutUsToCreate = new AboutUs.Builder()
                .setAddress("New Office, New City")
                .setOfficeHours("24/7")
                .setEmail("new@example.com")
                .setTelephone("555-0000")
                .setUuid(UUID.randomUUID()) // Assuming UUID might be passed or generated by @PrePersist
                .setCreatedAt(fixedTime)
                .setUpdatedAt(fixedTime)
                .build();
    }

    // --- Create Tests ---
    @Test
    void create_shouldSaveAndReturnAboutUs() {
        // Simulate @PrePersist behavior for ID and potentially other fields if not set in builder for 'aboutUsToCreate'
        AboutUs savedAboutUs = new AboutUs.Builder()
                .copy(aboutUsToCreate) // Start with data intended for creation
                .setId(2) // ID will be generated by DB
                .setUuid(aboutUsToCreate.getUuid() != null ? aboutUsToCreate.getUuid() : UUID.randomUUID()) // Ensure UUID
                .setDeleted(false) // @PrePersist sets this
                .setCreatedAt(aboutUsToCreate.getCreatedAt() != null ? aboutUsToCreate.getCreatedAt() : LocalDateTime.now())
                .setUpdatedAt(aboutUsToCreate.getUpdatedAt() != null ? aboutUsToCreate.getUpdatedAt() : LocalDateTime.now())
                .build();

        when(aboutUsRepository.save(any(AboutUs.class))).thenReturn(savedAboutUs);

        AboutUs created = aboutUsService.create(aboutUsToCreate);

        assertNotNull(created);
        assertEquals(savedAboutUs.getAddress(), created.getAddress());
        assertEquals(savedAboutUs.getId(), created.getId());
        assertNotNull(created.getUuid());
        assertFalse(created.isDeleted()); // As per @PrePersist logic
        verify(aboutUsRepository).save(any(AboutUs.class));
    }

    @Test
    void create_shouldUseExistingUuidIfProvided() {
        UUID specificUuid = UUID.randomUUID();
        AboutUs toCreateWithUuid = new AboutUs.Builder()
                .setUuid(specificUuid)
                .setAddress("Specific Address")
                .setEmail("specific@example.com")
                .setTelephone("111-2222")
                .build();

        AboutUs savedAboutUs = new AboutUs.Builder().copy(toCreateWithUuid).setId(3).build();
        when(aboutUsRepository.save(any(AboutUs.class))).thenReturn(savedAboutUs);

        AboutUs created = aboutUsService.create(toCreateWithUuid);

        assertNotNull(created);
        assertEquals(specificUuid, created.getUuid());
        verify(aboutUsRepository).save(toCreateWithUuid);
    }


    // --- Read by ID Tests ---
    @Test
    void readById_shouldReturnAboutUs_whenFoundAndNotDeleted() {
        when(aboutUsRepository.findByIdAndDeletedFalse(1)).thenReturn(Optional.of(sampleAboutUs));
        AboutUs found = aboutUsService.read(1);
        assertNotNull(found);
        assertEquals(sampleAboutUs.getUuid(), found.getUuid());
        verify(aboutUsRepository).findByIdAndDeletedFalse(1);
    }

    @Test
    void readById_shouldReturnNull_whenNotFound() {
        when(aboutUsRepository.findByIdAndDeletedFalse(anyInt())).thenReturn(Optional.empty());
        AboutUs found = aboutUsService.read(99);
        assertNull(found);
        verify(aboutUsRepository).findByIdAndDeletedFalse(99);
    }

    // --- Read by UUID Tests ---
    @Test
    void readByUuid_shouldReturnAboutUs_whenFoundAndNotDeleted() {
        when(aboutUsRepository.findByUuidAndDeletedFalse(commonUuid)).thenReturn(Optional.of(sampleAboutUs));
        AboutUs found = aboutUsService.read(commonUuid);
        assertNotNull(found);
        assertEquals(sampleAboutUs.getId(), found.getId());
        verify(aboutUsRepository).findByUuidAndDeletedFalse(commonUuid);
    }

    @Test
    void readByUuid_shouldReturnNull_whenNotFound() {
        UUID nonExistentUuid = UUID.randomUUID();
        when(aboutUsRepository.findByUuidAndDeletedFalse(nonExistentUuid)).thenReturn(Optional.empty());
        AboutUs found = aboutUsService.read(nonExistentUuid);
        assertNull(found);
        verify(aboutUsRepository).findByUuidAndDeletedFalse(nonExistentUuid);
    }

    // --- Update Tests ---
    @Test
    void update_shouldUpdateAndReturnAboutUs_whenFoundAndNotDeleted() {
        AboutUs updatesToApply = new AboutUs.Builder()
                .copy(sampleAboutUs) // Has ID 1 and commonUuid
                .setAddress("Updated Address, 456 New Ave")
                .setOfficeHours("Sat-Sun: 10am-4pm")
                .build(); // Note: @PreUpdate will set updatedAt in the actual entity

        // Simulate the entity returned after save, with updatedAt potentially modified by @PreUpdate
        AboutUs updatedAndSavedAboutUs = new AboutUs.Builder()
                .copy(updatesToApply)
                .setUpdatedAt(LocalDateTime.now()) // Simulate @PreUpdate
                .build();

        when(aboutUsRepository.findByIdAndDeletedFalse(sampleAboutUs.getId())).thenReturn(Optional.of(sampleAboutUs));
        // The service's update method saves the 'aboutUs' parameter directly IF found
        when(aboutUsRepository.save(any(AboutUs.class))).thenReturn(updatedAndSavedAboutUs);

        AboutUs updated = aboutUsService.update(updatesToApply);

        assertNotNull(updated);
        assertEquals("Updated Address, 456 New Ave", updated.getAddress());
        assertEquals("Sat-Sun: 10am-4pm", updated.getOfficeHours());
        // assertEquals(updatedAndSavedAboutUs.getUpdatedAt(), updated.getUpdatedAt()); // Check if updatedAt was "updated"
        verify(aboutUsRepository).findByIdAndDeletedFalse(sampleAboutUs.getId());
        verify(aboutUsRepository).save(updatesToApply); // Verifies that the passed object is saved
    }

    @Test
    void update_shouldReturnNull_whenAboutUsHasNoId() {
        // In the service, this check is for uuid, but practically ID is what's used for lookup.
        // If we strictly follow the service's `if (aboutUs.getUuid() == null)`, let's test that.
        // However, the repository lookup uses getId().
        // For this test, let's create an object that would fail the ID check in the `map` part.
        AboutUs aboutUsWithNoId = new AboutUs.Builder().setAddress("No ID Update").build();
        // No mock for findByIdAndDeletedFalse, as it won't be called if ID is missing for the map.
        // But if getUuid() is null, service returns null earlier.
        // If getUuid() is NOT null, but getId() leads to not found:

        AboutUs aboutUsWithNonNullUuidNoIdInDb = new AboutUs.Builder()
                .setUuid(UUID.randomUUID())
                .setAddress("Data").build(); // ID is 0 by default

        when(aboutUsRepository.findByIdAndDeletedFalse(0)).thenReturn(Optional.empty());
        // The service will try to find by ID 0 (default int value if not set)

        AboutUs updated = aboutUsService.update(aboutUsWithNonNullUuidNoIdInDb);
        assertNull(updated);
        verify(aboutUsRepository).findByIdAndDeletedFalse(0);
        verify(aboutUsRepository, never()).save(any(AboutUs.class));
    }

    @Test
    void update_shouldReturnNull_whenAboutUsUuidIsNull() {
        // This test addresses the direct UUID null check in the service.
        AboutUs aboutUsWithNullUuid = new AboutUs.Builder()
                .setId(1) // has an ID
                .setUuid(null) // but UUID is null
                .setAddress("Test")
                .build();

        AboutUs result = aboutUsService.update(aboutUsWithNullUuid);

        assertNull(result);
        verify(aboutUsRepository, never()).findByIdAndDeletedFalse(anyInt());
        verify(aboutUsRepository, never()).save(any(AboutUs.class));
    }


    @Test
    void update_shouldReturnNull_whenNotFoundOrDeleted() {
        AboutUs nonExistentAboutUs = new AboutUs.Builder()
                .setId(99)
                .setUuid(UUID.randomUUID())
                .setAddress("Non Existent")
                .build();
        when(aboutUsRepository.findByIdAndDeletedFalse(99)).thenReturn(Optional.empty());

        AboutUs updated = aboutUsService.update(nonExistentAboutUs);

        assertNull(updated);
        verify(aboutUsRepository).findByIdAndDeletedFalse(99);
        verify(aboutUsRepository, never()).save(any(AboutUs.class));
    }

    // --- Delete Tests ---
    @Test
    void delete_shouldSoftDeleteAndReturnTrue_whenFoundAndNotDeleted() {
        when(aboutUsRepository.findByIdAndDeletedFalse(sampleAboutUs.getId())).thenReturn(Optional.of(sampleAboutUs));

        // The service constructs a new AboutUs object with deleted=true and saves it.
        // We don't need to mock the builder, just the save of the resulting object.
        // The object passed to save will have deleted=true.
        doAnswer(invocation -> {
            AboutUs arg = invocation.getArgument(0);
            assertTrue(arg.isDeleted());
            assertEquals(sampleAboutUs.getId(), arg.getId()); // Ensure it's the correct entity being "deleted"
            return arg; // save usually returns the saved entity
        }).when(aboutUsRepository).save(any(AboutUs.class));


        boolean result = aboutUsService.delete(sampleAboutUs.getId());

        assertTrue(result);
        verify(aboutUsRepository).findByIdAndDeletedFalse(sampleAboutUs.getId());
        verify(aboutUsRepository).save(argThat(au -> au.isDeleted() && au.getId() == sampleAboutUs.getId()));
    }

    @Test
    void delete_shouldReturnFalse_whenNotFoundOrAlreadyDeleted() {
        when(aboutUsRepository.findByIdAndDeletedFalse(99)).thenReturn(Optional.empty());
        boolean result = aboutUsService.delete(99);
        assertFalse(result);
        verify(aboutUsRepository).findByIdAndDeletedFalse(99);
        verify(aboutUsRepository, never()).save(any(AboutUs.class));
    }

    // --- GetAll Tests ---
    @Test
    void getAll_shouldReturnListOfNonDeletedAboutUs() {
        AboutUs anotherAboutUs = new AboutUs.Builder().setId(2).setUuid(UUID.randomUUID()).setAddress("Another Entry").build();
        List<AboutUs> list = List.of(sampleAboutUs, anotherAboutUs);
        when(aboutUsRepository.findAllByDeletedFalse()).thenReturn(list);

        List<AboutUs> result = aboutUsService.getAll();

        assertNotNull(result);
        assertEquals(2, result.size());
        verify(aboutUsRepository).findAllByDeletedFalse();
    }

    @Test
    void getAll_shouldReturnEmptyList_whenNoNonDeletedEntriesExist() {
        when(aboutUsRepository.findAllByDeletedFalse()).thenReturn(Collections.emptyList());
        List<AboutUs> result = aboutUsService.getAll();
        assertNotNull(result);
        assertTrue(result.isEmpty());
        verify(aboutUsRepository).findAllByDeletedFalse();
    }
}